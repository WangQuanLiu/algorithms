#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<cstdio>
using namespace std;
int maxRow, maxCol;
inline void find(short** flag,char** map,int row,int col) {
	if (row < 0 || col < 0||row>=maxRow||col>=maxCol)return;
	if ( map[row][col] == '#' ) {
		flag[row][col] = -1;
	}
	else if (flag[row][col] != 0)return;
	else {
		flag[row][col] = 1;
		if (map[row][col] == '-') {
			//map[row][col] = 1;
			find(flag, map, row, col - 1);
			find(flag, map, row, col + 1);
		}
		else if (map[row][col] == '|') {
			find(flag, map, row + 1, col);
			find(flag, map, row - 1, col);
		}
		else if (map[row][col] == '+'||map[row][col]=='S'||map[row][col]=='T') {
			//map[row]
			find(flag, map, row + 1, col);
			find(flag, map, row - 1, col);
			find(flag, map, row, col + 1);
			find(flag, map, row, col - 1);
		}
		else if (map[row][col] == '.') {
			find(flag, map, row + 1, col);
		}
		
	}
}
struct Posi {
	int row, col;
};
int main() {
	int row, col;
	char  **map;
	//char map[5][5]{ 0 };
	Posi s, t;
	short** first_flag,**flag;
	//short first_flag[5][5]{ 0 }, flag[5][5]{ 0 };
	scanf("%d %d", &row, &col);
	maxRow = row;
	maxCol = col;
	
	map = (char**)malloc(sizeof(char*)*row);
	first_flag = (short**)malloc(sizeof(short*)*row);
	flag = (short**)malloc(sizeof(short*)*row);;
	int i, j;
	for (i = 0; i < row; i++) {
		map[i] = (char*)malloc(col);
		first_flag[i] = (short*)malloc(sizeof(short)*col);
		flag[i]= (short*)malloc(sizeof(short)*col);
		memset(map[i], 0, col);
		memset(first_flag[i], 0, sizeof(short)*col);
		memset(flag[i], 0, sizeof(short)*col);
	}
	getchar();
	for (i = 0; i < row; i++) {
		for (j = 0; j < col; j++) {
			map[i][j]= getchar();
			if (map[i][j] == 'S') {
				s.row = i;
				s.col = j;
			}
			else if (map[i][j] == 'T') {
				t.row = i;
				t.col = j;
			}
		}
		getchar();
	}
	find(first_flag, map, s.row, s.col);
	if (first_flag[t.row][t.col]!=1) {
		printf("I'm stuck!");
		return 0;
	}
	int point = 0;
	int k;
	for (i = 0; i < row; i++) {
		for (j = 0; j < col; j++) {
			if (first_flag[i][j] == 1) {
				find(flag, map, i, j);
				if (flag[t.row][t.col] != 1) {
					//cout << i << " " << j << endl;
					point++;
				}
			}
		//	memset(flag, 0, sizeof(short)*row*col);
			for (k = 0; k < row; k++) {
				memset(flag[k], 0, sizeof(short)*col);
			}
		}
	}

	printf("%d", point);




	return 0;
}
